package com;

class OperatorBreak {
    public static void main(String[] args) {


    /** Оператор break в Java находит три применения. Для завершения
       оператор switch и для выхода из цикла.
       В-третьих, оператор можно применять в качестве
       "цивилизованной" формы оператора безусловного перехода goto
        */

        // Пример 1. Завершение цикла
        for (int i = 0; i < 100; i++) {
            if (i == 10)
                break; // выход из цикла, ели знаение i равно 10
            System.out.println("i = " + i);
            // Оператор break к более раннему выходу из цикла,
            // когда значение переменно i становится равным 10.
        }
        System.out.println("Цикл завершен");

        // Пример 2. Выход из ряд вложенных циклов.
        // Оператор break осуществляет только из самого внутреннего цикла.


        for(int i = 0; i < 3; i++) {
            System.out.print("Проход " + i + ": ");
            for(int j = 0; j < 100; j++) {
                if (j == 10)
                    break;
                System.out.print(j + " ");
            }
            System.out.println();
        }
        System.out.println("Циклы завершены.");

        /** Применение большого количества оператора break
            приводит к нарушению структуры кода.
            Оператор break, завершающий последовательность
            операторов, выполняемых в операторе switch, оказывает
            влияние только на данный оператор switch, но не на
            любые содержащие его циклы.
         */
        /** Оператор break не предназначен в качестве обычного
        средства выхода из цикла. Для этого служит условное выражение
        в цикле. Этот оператор следует использовать для выхода из цикла
        ТОЛЬКО В ОСОБЫХ СЛУЧАЯХ.
         */
        System.out.println();

        // Применение оператор break в качестве формы оператора goto
        // break c меткой имеет вид:
        /**
         * break - метка
         * При выполнении этой формы оператора break
         * управление передается блоку кода, помеченному меткой.
         * Его нельзя использовть для передаи управления внешнему
         * блоку кода, которые не содержит данный оператор break.
         */
        // Пример 3. Применения оператора break
        // в качестве формы оператора goto
        boolean t = true;

        first: {
            second:
            {
                third:
                {
                    System.out.println("Предшествует оператору break");
                    if (t)
                        break second; // выход из блока second!
                    System.out.println("Этот оператор выополняться не будет!");
                }
                System.out.println("Этот оператор выполнять не будет!");
            }
            System.out.println("Этот оператор следует за блоком second");
        }

        System.out.println();

        // Пример 4. Выход из вложенных циклов
        // В примере внешний цикл выполняетя только 1 раз

        outer:
        for(int i = 0; i < 3; i++) {
            System.out.print("Проход " + i + ": ");
            for(int j = 0; j < 100; j++) {
                if (j == 10)
                    break outer; // выход из обоих циклов
                System.out.print(j + " ");
            }
            System.out.println("Эта строка не будет выводиться");
        }
        System.out.println("Циклы завершены");

        one:
        for(int i = 0; i < 3; i++) {
            System.out.print("Проход " + i + ": ");
        }
            for(int j = 0; j < 100; j++) {
                if (j == 10)
                   /** break one; // ОШИБКА!. Нельзя выполнять переход к метка,
                                // если она не определена для объемлющего блока кода
                                */
                   break; // ко второму циклу относится
                System.out.print(j + " ");
            }
    }
}


